library(EBSeq)
GeneMatWTobj <- data.matrix(read.table(file="GeneMatWT.txt"))
GeneMatWTobj <- data.matrix(read.table(file="exp/GeneMatWT.txt"))
GeneMatWTobj <- data.matrix(read.table(file="exp/GeneMatWT.txt"))
print(GeneMatWTobj)
View(GeneMatWTobj)
rsem-run-ebseq --help
install.pacakges("rsem")
install.packages("rsem")
knitr::opts_chunk$set(echo = TRUE)
library(BiocManager)
library(EBSeq)
library(rsem)
GeneMatWTobj <- data.matrix(read.table(file="exp/GeneMatWT.txt"))
print(GeneMatWTobj)
EBWTout <- EBSeq::EBTest(Data=GeneMatWTobj, Conditions=as.factor(rep(c("L","D"),each=3)))
GeneMatWTobj <- data.matrix(read.table(file="exp/GeneMatWT.txt"))
Sizes=MedianNorm(GeneMatWTobj)
EBWTout <- EBSeq::EBTest(Data=GeneMatWTobj,Sizefactors=Sizes Conditions=as.factor(rep(c("L","D"),each=3, )))
GeneMatWTobj <- data.matrix(read.table(file="exp/GeneMatWT.txt"))
Sizes=MedianNorm(GeneMatWTobj)
EBWTout <- EBSeq::EBTest(Data=GeneMatWTobj,Sizefactors=Sizes, Conditions=as.factor(rep(c("L","D"),each=3)))
GeneMatWTobj <- data.matrix(read.table(file="exp/GeneMatWT.txt"))
Sizes=MedianNorm(GeneMatWTobj)
EBWTout <- EBSeq::EBTest(Data=GeneMatWTobj,sizeFactors=Sizes, Conditions=as.factor(rep(c("L","D"),each=3)))
GeneMatWTobj <- data.matrix(read.table(file="exp/GeneMatWT.txt"))
Sizes=MedianNorm(GeneMatWTobj)
EBWTout <- EBSeq::EBTest(Data=GeneMatWTobj,sizeFactors=Sizes, Conditions=as.factor(rep(c("L","D"),each=3)), maxround=5)
GeneMatWTobj <- data.matrix(read.table(file="exp/GeneMatWT.txt"))
Sizes=MedianNorm(GeneMatWTobj)
EBWTout <- EBSeq::EBTest(Data=GeneMatWTobj,sizeFactors=Sizes, Conditions=as.factor(rep(c("L","D"),each=3)), maxround=5)
EBDEResWTobj <- EBSeq::GetDEResults(EBWTout, FDR=0.05)
str(EBDEResWTobj$DEfound)
head(EBDEResWTobj$PPMat)
GeneMatWTobj <- data.matrix(read.table(file="exp/GeneMatWT.txt"))
Sizes=MedianNorm(GeneMatWTobj)
EBWTout <- EBSeq::EBTest(Data=GeneMatWTobj,sizeFactors=Sizes, Conditions=as.factor(rep(c("L","D"),each=3)), maxround=5)
EBDEResWTobj <- EBSeq::GetDEResults(EBWTout, FDR=0.05)
str(EBDEResWTobj$DEfound)
head(EBDEResWTobj$PPMat)
GeneFCWT <- PostFC(EBWTout)
str(GeneFCWT)
PlotPostVsRawFC(EBWTout, GeneFCWT)
View(EBWTout)
# Create a matrix from the expression levels
GeneMatWTobj <- data.matrix(read.table(file="exp/GeneMatWT.txt"))
#
Sizes=MedianNorm(GeneMatWTobj)
EBWTout <- EBSeq::EBTest(Data=GeneMatWTobj,sizeFactors=Sizes, Conditions=as.factor(rep(c("L","D"),each=3)), maxround=5)
head(EBWTout)
# Get the differential expression results
EBDEResWTobj <- EBSeq::GetDEResults(EBWTout, FDR=0.05)
str(EBDEResWTobj$DEfound)
head(EBDEResWTobj$PPMat)
GeneFCWT <- PostFC(EBWTout) # it does Dark/Light
head.matrix(GeneFCWT)
# PlotPostVsRawFC(EBWTout, GeneFCWT)
NormEBDEResWTobj <- GetNormalizedMat(EBDEResWTobj)
# Create a matrix from the expression levels
GeneMatWTobj <- data.matrix(read.table(file="exp/GeneMatWT.txt"))
#
Sizes=MedianNorm(GeneMatWTobj)
EBWTout <- EBSeq::EBTest(Data=GeneMatWTobj,sizeFactors=Sizes, Conditions=as.factor(rep(c("L","D"),each=3)), maxround=5)
head(EBWTout)
# Get the differential expression results
EBDEResWTobj <- EBSeq::GetDEResults(EBWTout, FDR=0.05)
str(EBDEResWTobj$DEfound)
head(EBDEResWTobj$PPMat)
GeneFCWT <- PostFC(EBWTout) # it does Dark/Light
head(GeneFCWT)
# PlotPostVsRawFC(EBWTout, GeneFCWT)
NormEBDEResWTobj <- GetNormalizedMat(EBDEResWTobj, Sizes=Sizes)
# Create a matrix from the expression levels
GeneMatWTobj <- data.matrix(read.table(file="exp/GeneMatWT.txt"))
#
Sizes=MedianNorm(GeneMatWTobj)
#EBWTout <- EBSeq::EBTest(Data=GeneMatWTobj,sizeFactors=Sizes, Conditions=as.factor(rep(c("L","D"),each=3)), maxround=5)
head(EBWTout)
# Get the differential expression results
EBDEResWTobj <- EBSeq::GetDEResults(EBWTout, FDR=0.05)
str(EBDEResWTobj$DEfound)
head(EBDEResWTobj$PPMat)
GeneFCWT <- PostFC(EBWTout) # it does Dark/Light
head(GeneFCWT)
# PlotPostVsRawFC(EBWTout, GeneFCWT)
NormEBDEResWTobj <- GetNormalizedMat(EBDEResWTobj, Sizes=length(EBDEResWTobj))
# Create a matrix from the expression levels
GeneMatWTobj <- data.matrix(read.table(file="exp/GeneMatWT.txt"))
#
Sizes=MedianNorm(GeneMatWTobj)
#EBWTout <- EBSeq::EBTest(Data=GeneMatWTobj,sizeFactors=Sizes, Conditions=as.factor(rep(c("L","D"),each=3)), maxround=5)
# head(EBWTout)
# Get the differential expression results
EBDEResWTobj <- EBSeq::GetDEResults(EBWTout, FDR=0.05)
str(EBDEResWTobj$DEfound)
head(EBDEResWTobj$PPMat)
GeneFCWT <- PostFC(EBWTout) # it does Dark/Light
head(GeneFCWT)
# PlotPostVsRawFC(EBWTout, GeneFCWT)
NormEBDEResWTobj <- GetNormalizedMat(EBDEResWTobj, Sizes=length(EBDEResWTobj$DEfound))
# Create a matrix from the expression levels
GeneMatWTobj <- data.matrix(read.table(file="exp/GeneMatWT.txt"))
#
Sizes=MedianNorm(GeneMatWTobj)
#EBWTout <- EBSeq::EBTest(Data=GeneMatWTobj,sizeFactors=Sizes, Conditions=as.factor(rep(c("L","D"),each=3)), maxround=5)
# head(EBWTout)
# Get the differential expression results
# EBDEResWTobj <- EBSeq::GetDEResults(EBWTout, FDR=0.05)
# str(EBDEResWTobj$DEfound)
# head(EBDEResWTobj$PPMat)
# GeneFCWT <- PostFC(EBWTout) # it does Dark/Light
head(GeneFCWT)
# PlotPostVsRawFC(EBWTout, GeneFCWT)
NormEBDEResWTobj <- GetNormalizedMat(GeneMatWTobj, Sizes=Sizes)
heatmap.2(NormEBDEResWTobj, scale="row", trace="none", Colv=F)
View(EBWTout)
View(EBWTout)
View(EBDEResWTobj)
knitr::opts_chunk$set(echo = TRUE)
library(BiocManager)
library(tximport)
library(tximportData)
library(DESeq2)
library(regionReport)
#dir <- system.file('extdata', package='tximportData')
files = "exp3/BlsA/GeneMatBlsA.txt"
tabL <- as.table(matrix(c("BlsAL1genes.results","BlsAL2genes.results","BlsAL3genes.results"), ncol=1))
tabD <- as.table(matrix(c("BlsAD1genes.results", "BlsAD2genes.results", "BlsAD3genes.results"), ncol=1))
files <- c(file.path("exp3", "BlsAL", tabL), (file.path("exp3", "BlsAD",tabD)))
names(files) <- paste0(c(tabL, tabD))
cts <- as.matrix(read.table(file="exp3/BlsA/GeneMatBlsA.txt"))
coldata <- as.matrix.data.frame(matrix(c("light", "light", "light", "dark", "dark","dark","paired-end","paired-end","paired-end","paired-end","paired-end","paired-end"), ncol=2), colnames=c("condition", "type"))
colnames(coldata) <- c("condition", "type")
all(rownames(coldata) == colnames(cts))
dds <- DESeqDataSetFromMatrix(countData=round(cts), colData=coldata, design = ~ condition)
dds <- DESeq(dds)
res <- results(dds)
res <- results(dds, name="condition_light_vs_dark")
res <- results(dds, contrast=c("condition", "light","dark"))
res
View(dds)
View(res)
View(res)
dds@colData@listData
dds
View(coldata)
View(cts)
trans.count = log10(cts)
$resultsNames(dds)
View(trans.count)
data <- plotCounts(dds, gene=i, returnData = TRUE)
data <- plotCounts(dds, returnData = TRUE)
Normdata <- estimateSizeFactors(dds);
counts(dds, normalized=TRUE)
#resultsNames(dds)
#$resLFC <- lfcShrink(dds, coef="condition_light_vs_dark", type="apeglm")
View(Normdata)
Normdata <- estimateSizeFactors(dds);
counts(Normdata, normalized=TRUE)
#resultsNames(dds)
#$resLFC <- lfcShrink(dds, coef="condition_light_vs_dark", type="apeglm")
Normdata <- estimateSizeFactors(dds);
Normdata <- as.matrix.data.frame(counts(Normdata, normalized=TRUE))
#resultsNames(dds)
#$resLFC <- lfcShrink(dds, coef="condition_light_vs_dark", type="apeglm")
View(Normdata)
Normdata <- estimateSizeFactors(dds);
Normdata <- data.frame(counts(Normdata, normalized=TRUE))
#resultsNames(dds)
#$resLFC <- lfcShrink(dds, coef="condition_light_vs_dark", type="apeglm")
View(Normdata)
Normdata <- estimateSizeFactors(dds);
Normdata <- as.matrix(data.frame(counts(Normdata, normalized=TRUE)))
write.csv(Normdata, file='exp3/BlsALD_DEseq_norm.csv')
#resultsNames(dds)
#$resLFC <- lfcShrink(dds, coef="condition_light_vs_dark", type="apeglm")
write.csv(as.data.frame(res), file='exp3/BlsALDALL_DEseq_results.csv')
write.csv(as.data.frame(resOrdered), file='exp3/BlsALD_DEseq_results.csv')
cbind(as.data.frame(res), Normdata)
write.csv(as.data.frame(res), file='exp3/BlsALDALL_DEseq_results.csv')
write.csv(as.data.frame(resOrdered), file='exp3/BlsALD_DEseq_results.csv')
All <- cbind(as.data.frame(res), Normdata)
write.csv(All, file='exp3/BlsALDALL_DEseq_results.csv')
write.csv(as.data.frame(resOrdered), file='exp3/BlsALD_DEseq_results.csv')
All <- cbind(as.data.frame(res), Normdata)
write.csv(All, file='exp3/BlsALDALL_DEseq_results.csv')
resSig <- subset(All, padj < 0.1)
write.csv(as.data.frame(resSig), file='exp3/BlsALD_DEseq_results.csv')
knitr::opts_chunk$set(echo = TRUE)
library(BiocManager)
library(tximport)
library(tximportData)
library(DESeq2)
library(regionReport)
#files = "exp3/BlsA/GeneMatBlsA.txt"
#tabL <- as.table(matrix(c("BlsAL1genes.results","BlsAL2genes.results","BlsAL3genes.results"), ncol=1))
#tabD <- as.table(matrix(c("BlsAD1genes.results", "BlsAD2genes.results", "BlsAD3genes.results"), ncol=1))
#files <- c(file.path("exp3", "BlsAL", tabL), (file.path("exp3", "BlsAD",tabD)))
#names(files) <- paste0(c(tabL, tabD))
# Same for WT
filesW = "exp3/WT/GeneMatWT.txt"
tabLW <- as.table(matrix(c("WTL1genes.results","WTL2genes.results","WTL3genes.results"), ncol=1))
tabDW <- as.table(matrix(c("WTD1genes.results", "WTD2genes.results", "WTD3genes.results"), ncol=1))
filesW <- c(file.path("exp3", "WTL", tabLW), (file.path("exp3", "WTD",tabDW)))
names(filesW) <- paste0(c(tabLW, tabDW))
## BlsA
# # read in data
# cts <- as.matrix(read.table(file="exp3/BlsA/GeneMatBlsA.txt"))
# # create Experiment Data
# coldata <- as.matrix.data.frame(matrix(c("light", "light", "light", "dark", "dark","dark","paired-end","paired-end","paired-end","paired-end","paired-end","paired-end"), ncol=2), colnames=c("condition", "type"))
# colnames(coldata) <- c("condition", "type")
# all(rownames(coldata) == colnames(cts))
# # Perform DESeq analysis
# dds <- DESeqDataSetFromMatrix(countData=round(cts), colData=coldata, design = ~ condition)
# dds <- DESeq(dds)
# res <- results(dds)
# res <- results(dds, name="condition_light_vs_dark")
# res <- results(dds, contrast=c("condition", "light","dark"))
## WT
# read in data
ctsW <- as.matrix(read.table(file="exp3/WT/GeneMatWT.txt"))
# create Experiment Data
coldataW <- as.matrix.data.frame(matrix(c("light", "light", "light", "dark", "dark","dark","paired-end","paired-end","paired-end","paired-end","paired-end","paired-end"), ncol=2), colnames=c("condition", "type"))
colnames(coldataW) <- c("condition", "type")
all(rownames(coldataW) == colnames(ctsW))
# Perform DESeq analysis
ddsW <- DESeqDataSetFromMatrix(countData=round(ctsW), colData=coldataW, design = ~ condition)
ddsW <- DESeq(ddWs)
## BlsA
# # read in data
# cts <- as.matrix(read.table(file="exp3/BlsA/GeneMatBlsA.txt"))
# # create Experiment Data
# coldata <- as.matrix.data.frame(matrix(c("light", "light", "light", "dark", "dark","dark","paired-end","paired-end","paired-end","paired-end","paired-end","paired-end"), ncol=2), colnames=c("condition", "type"))
# colnames(coldata) <- c("condition", "type")
# all(rownames(coldata) == colnames(cts))
# # Perform DESeq analysis
# dds <- DESeqDataSetFromMatrix(countData=round(cts), colData=coldata, design = ~ condition)
# dds <- DESeq(dds)
# res <- results(dds)
# res <- results(dds, name="condition_light_vs_dark")
# res <- results(dds, contrast=c("condition", "light","dark"))
## WT
# read in data
ctsW <- as.matrix(read.table(file="exp3/WT/GeneMatWT.txt"))
# create Experiment Data
coldataW <- as.matrix.data.frame(matrix(c("light", "light", "light", "dark", "dark","dark","paired-end","paired-end","paired-end","paired-end","paired-end","paired-end"), ncol=2), colnames=c("condition", "type"))
colnames(coldataW) <- c("condition", "type")
all(rownames(coldataW) == colnames(ctsW))
# Perform DESeq analysis
ddsW <- DESeqDataSetFromMatrix(countData=round(ctsW), colData=coldataW, design = ~ condition)
ddsW <- DESeq(ddsW)
resW <- results(ddsW)
resW <- results(ddsW, name="condition_light_vs_dark")
resW <- results(ddsW, contrast=c("condition", "light","dark"))
## BlsA
# Normdata <- estimateSizeFactors(dds);
# Normdata <- as.matrix(data.frame(counts(Normdata, normalized=TRUE)))
# write.csv(Normdata, file='exp3/BlsALD_DEseq_norm.csv')
# #resultsNames(dds)
# #$resLFC <- lfcShrink(dds, coef="condition_light_vs_dark", type="apeglm")
## WT
NormdataW <- estimateSizeFactors(ddsW);
NormdataW <- as.matrix(data.frame(counts(NormdataW, normalized=TRUE)))
write.csv(NormdataW, file='exp3/WTLD_DEseq_norm.csv')
## BlsA
resOrdered <- res[order(res$pvalue),]
sum(res$padj <0.05, na.rm=TRUE)
res05 <- results(dds, alpha=0.05)
summary(res05)
sum(res05$padj <0.1, na.rm=TRUE)
## WT
resOrderedW <- resW[order(resW$pvalue),]
sum(resW$padj <0.05, na.rm=TRUE)
res05W <- results(dds, alpha=0.05)
summary(res05W)
sum(res05W$padj <0.1, na.rm=TRUE)
## BlsA
# resOrdered <- res[order(res$pvalue),]
# sum(res$padj <0.05, na.rm=TRUE)
# res05 <- results(dds, alpha=0.05)
# summary(res05)
# sum(res05$padj <0.1, na.rm=TRUE)
## WT
resOrderedW <- resW[order(resW$pvalue),]
sum(resW$padj <0.05, na.rm=TRUE)
res05W <- results(dds, alpha=0.05)
summary(res05W)
sum(res05W$padj <0.1, na.rm=TRUE)
## BlsA
# resOrdered <- res[order(res$pvalue),]
# sum(res$padj <0.05, na.rm=TRUE)
# res05 <- results(dds, alpha=0.05)
# summary(res05)
# sum(res05$padj <0.1, na.rm=TRUE)
## WT
resOrderedW <- resW[order(resW$pvalue),]
sum(resW$padj <0.05, na.rm=TRUE)
res05W <- results(ddsW, alpha=0.05)
summary(res05W)
sum(res05W$padj <0.1, na.rm=TRUE)
AllB <- cbind(as.data.frame(res), Normdata)
write.csv(AllB, file='exp3/BlsALDALL_DEseq_results.csv')
resSig <- subset(AllB, padj < 0.1)
write.csv(as.data.frame(resSig), file='exp3/BlsALD_DEseq_results.csv')
AllW <- cbind(as.data.frame(resW), NormdataW)
write.csv(AllW, file='exp3/WTLDALL_DEseq_results.csv')
resSigW <- subset(AllW, padj < 0.1)
write.csv(as.data.frame(resSigW), file='exp3/WTLD_DEseq_results.csv')
AllB <- cbind(as.data.frame(res), Normdata)
write.csv(AllB, file='exp3/BlsALDALL_DEseq_results.csv')
resSig <- subset(AllB, padj < 0.1)
write.csv(as.data.frame(resSig), file='exp3/BlsALD_DEseq_results.csv')
AllW <- cbind(as.data.frame(resW), NormdataW)
write.csv(AllW, file='exp3/WTLDALL_DEseq_results.csv')
resSigW <- subset(AllW, padj < 0.05)
write.csv(as.data.frame(resSigW), file='exp3/WTLD_DEseq_results.csv')
## BlsA
# # read in data
# cts <- as.matrix(read.table(file="exp3/BlsA/GeneMatBlsA.txt"))
# # create Experiment Data
# coldata <- as.matrix.data.frame(matrix(c("light", "light", "light", "dark", "dark","dark","paired-end","paired-end","paired-end","paired-end","paired-end","paired-end"), ncol=2), colnames=c("condition", "type"))
# colnames(coldata) <- c("condition", "type")
# all(rownames(coldata) == colnames(cts))
# # Perform DESeq analysis
# dds <- DESeqDataSetFromMatrix(countData=round(cts), colData=coldata, design = ~ condition)
# dds <- DESeq(dds)
# res <- results(dds)
# res <- results(dds, name="condition_light_vs_dark")
# res <- results(dds, contrast=c("condition", "light","dark"))
## WT
# read in data
ctsW <- as.matrix(read.table(file="exp3/WT/GeneMatWT.txt"))
# create Experiment Data
coldataW <- as.matrix.data.frame(matrix(c("light", "light", "light", "dark", "dark","dark","paired-end","paired-end","paired-end","paired-end","paired-end","paired-end"), ncol=2), colnames=c("condition", "type"))
colnames(coldataW) <- c("condition", "type")
all(rownames(coldataW) == colnames(ctsW))
# Perform DESeq analysis
ddsW <- DESeqDataSetFromMatrix(countData=round(ctsW), colData=coldataW, design = ~ condition)
ddsW <- DESeq(ddsW)
resW <- results(ddsW)
resW <- results(ddsW, name="condition_light_vs_dark")
resW <- results(ddsW, contrast=c("condition", "light","dark"))
## BlsA
# Normdata <- estimateSizeFactors(dds);
# Normdata <- as.matrix(data.frame(counts(Normdata, normalized=TRUE)))
# write.csv(Normdata, file='exp3/BlsALD_DEseq_norm.csv')
# #resultsNames(dds)
# #$resLFC <- lfcShrink(dds, coef="condition_light_vs_dark", type="apeglm")
## WT
NormdataW <- estimateSizeFactors(ddsW);
NormdataW <- as.matrix(data.frame(counts(NormdataW, normalized=TRUE)))
write.csv(NormdataW, file='exp3/WTLD_DEseq_norm.csv')
## BlsA
# resOrdered <- res[order(res$pvalue),]
# sum(res$padj <0.05, na.rm=TRUE)
# res05 <- results(dds, alpha=0.05)
# summary(res05)
# sum(res05$padj <0.1, na.rm=TRUE)
## WT
resOrderedW <- resW[order(resW$pvalue),]
sum(resW$padj <0.05, na.rm=TRUE)
res05W <- results(ddsW, alpha=0.05)
summary(res05W)
sum(res05W$padj <0.1, na.rm=TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(ggpubr)
Weight <- c(142, 103, 86, 165, 134, 154, 119, 81, 98, 122, 161, 117,119, 93, 144, 128, 131, 137, 158, 103)
# Check normality using Normalized QQ plot, histogram, and density plot
par(mfrow=c(1,2))
qqnorm(Weight)
qqline(Weight)
hist(Weight, main = "Histogram of Weight", xlab = "Weight in Pounds", ylab = "Frequency")
ggdensity(Weight, xlab="Weight in Pounds", ylab = "Relative Frequency", main="Density Plot of Weight")
set.seed(1)
library(boot)
mymean <- function(Weight,i) mean(Weight[i])
myboot <- boot(Weight, mymean, R=1000)
myboot
## Ordinary nonparametric bootstrap
boot(data=Weight, statistic=mymean, R=1000)
## Boostrap Confidence interval calculates
boot.ci(myboot, type="perc", conf=0.95)
boot.ci(myboot, type=c("perc", "bca"), conf = 0.95)
knitr::opts_chunk$set(echo = TRUE)
library(BiocManager)
library(tximport)
library(tximportData)
library(DESeq2)
library(regionReport)
## BlsA
resOrdered <- res[order(res$pvalue),]
sum(res$padj <0.05, na.rm=TRUE)
res05 <- results(dds, alpha=0.05)
summary(res05)
sum(res05$padj <0.1, na.rm=TRUE)
## WT
resOrderedW <- resW[order(resW$pvalue),]
sum(resW$padj <0.001, na.rm=TRUE)
# res05W <- results(ddsW, alpha=0.05)
# summary(res05W)
# sum(res05W$padj <0.1, na.rm=TRUE)
## BlsA
resOrdered <- res[order(res$pvalue),]
sum(res$padj <0.05, na.rm=TRUE)
summary(res)
res05 <- results(dds, alpha=0.05)
summary(res05)
sum(res05$padj <0.1, na.rm=TRUE)
## WT
resOrderedW <- resW[order(resW$pvalue),]
sum(resW$padj <0.001, na.rm=TRUE)
# res05W <- results(ddsW, alpha=0.05)
# summary(res05W)
# sum(res05W$padj <0.1, na.rm=TRUE)
View(resOrderedW)
View(resOrdered)
## BlsA
# resOrdered <- res[order(res$pvalue),]
# sum(res$padj <0.05, na.rm=TRUE)
# summary(res)
# res05 <- results(dds, alpha=0.05)
# summary(res05)
# sum(res05$padj <0.1, na.rm=TRUE)
## WT
resOrderedW <- resW[order(resW$pvalue),]
sum(resW$padj <0.001, na.rm=TRUE)
res05W <- results(ddsW, alpha=0.05)
summary(res05W)
res01W <- results(ddsW, alpha=0.01)
summary(res01W)
sum(res05W$padj <0.1, na.rm=TRUE)
## BlsA
# resOrdered <- res[order(res$pvalue),]
# sum(res$padj <0.05, na.rm=TRUE)
# summary(res)
# res05 <- results(dds, alpha=0.05)
# summary(res05)
# sum(res05$padj <0.1, na.rm=TRUE)
## WT
resOrderedW <- resW[order(resW$pvalue),]
sum(resW$padj <0.001, na.rm=TRUE)
res05W <- results(ddsW, alpha=0.05)
summary(res05W)
res01W <- results(ddsW, alpha=0.001)
summary(res01W)
sum(res05W$padj <0.1, na.rm=TRUE)
## Transform count data
rld <- tryCatch(rlog(dds), error = function(e) { rlog(dds, fitType = 'mean') })
## Transform count data
rld <- tryCatch(rlog(dds), error = function(e) { rlog(dds, fitType = 'mean') })
## Obtain the sample euclidean distances
sampleDists <- dist(t(assay(rld)))
sampleDistMatrix <- as.matrix(sampleDists)
## Add names based on intgroup
rownames(sampleDistMatrix) <- c("∆BlsAL1", "∆BlsAL2", "∆BlsAL3","∆BlsAD1", "∆BlsAD2", "∆BlsAD3")
colnames(sampleDistMatrix) <- NULL
## Define colors to use for the heatmap if none were supplied
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
knitr::opts_chunk$set(echo = TRUE)
library(BiocManager)
library(tximport)
library(tximportData)
library(DESeq2)
library(regionReport)
## Obtain the sample euclidean distances
sampleDists <- dist(t(assay(rld)))
sampleDistMatrix <- as.matrix(sampleDists)
## Add names based on intgroup
rownames(sampleDistMatrix) <- c("∆BlsAL1", "∆BlsAL2", "∆BlsAL3","∆BlsAD1", "∆BlsAD2", "∆BlsAD3")
colnames(sampleDistMatrix) <- NULL
## Define colors to use for the heatmap if none were supplied
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
## Obtain the sample euclidean distances
sampleDists <- dist(t(assay(rld)))
sampleDistMatrix <- as.matrix(sampleDists)
## Add names based on intgroup
rownames(sampleDistMatrix) <- c("∆BlsAL1", "∆BlsAL2", "∆BlsAL3","∆BlsAD1", "∆BlsAD2", "∆BlsAD3")
colnames(sampleDistMatrix) <- NULL
## Define colors to use for the heatmap if none were supplied
#colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
## Make the heatmap
pheatmap(sampleDistMatrix, clustering_distance_rows = sampleDists,
clustering_distance_cols = sampleDists)
## Obtain the sample euclidean distances
sampleDists <- dist(t(assay(rld)))
sampleDistMatrix <- as.matrix(sampleDists)
## Add names based on intgroup
rownames(sampleDistMatrix) <- c("∆BlsAL1", "∆BlsAL2", "∆BlsAL3","∆BlsAD1", "∆BlsAD2", "∆BlsAD3")
colnames(sampleDistMatrix) <- NULL
## Define colors to use for the heatmap if none were supplied
#colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
## Make the heatmap
#pheatmap(sampleDistMatrix, clustering_distance_rows = sampleDists,
clustering_distance_cols = sampleDists, color=colors)
## Obtain the sample euclidean distances
sampleDists <- dist(t(assay(rld)))
sampleDistMatrix <- as.matrix(sampleDists)
## Add names based on intgroup
rownames(sampleDistMatrix) <- c("∆BlsAL1", "∆BlsAL2", "∆BlsAL3","∆BlsAD1", "∆BlsAD2", "∆BlsAD3")
colnames(sampleDistMatrix) <- NULL
## Define colors to use for the heatmap if none were supplied
#colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
## Make the heatmap
#pheatmap(sampleDistMatrix, clustering_distance_rows = sampleDists, clustering_distance_cols = sampleDists, color=colors)
#print(dds@colData)
regionReport::DESeq2Report(dds, project="BlsA", intgroup=c("condition", "type", "sizeFactor"), colors=NULL, res =NULL, nBest=500, nBestFeatures=20, customCode=NULL, outidr="DESeq2Exploration", output="DESeq2Exploration", browse=interactive())
knitr::opts_chunk$set(echo = TRUE)
library(BiocManager)
library(tximport)
library(tximportData)
library(DESeq2)
library(regionReport)
